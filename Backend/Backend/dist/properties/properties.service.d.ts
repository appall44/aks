import { Repository } from 'typeorm';
import { Property } from './entities/property.entity';
import { CreatePropertyDto } from './dto/create-property.dto';
import { UpdatePropertyDto } from './dto/update-property.dto';
import { Role } from 'src/shared/enums/role.enum';
import { Owner } from 'src/owner/entities/owner.entity';
import { Admin } from 'src/admin/entities/admin.entity';
import { Tenant } from '../tenant/entities/tenant.entity';
export declare class OwnerPropertiesService {
    private readonly propertyRepository;
    private readonly ownerRepository;
    private readonly adminRepository;
    private readonly tenantRepository;
    constructor(propertyRepository: Repository<Property>, ownerRepository: Repository<Owner>, adminRepository: Repository<Admin>, tenantRepository: Repository<Tenant>);
    createProperty(userId: number, dto: CreatePropertyDto, userRole: Role): Promise<Property>;
    updateProperty(propertyId: number, userId: number, userRole: Role, dto: UpdatePropertyDto): Promise<Property>;
    deleteProperty(propertyId: number, userId: number, userRole: Role): Promise<void>;
    getAllProperties(): Promise<Property[]>;
    getPropertyById(id: number, userId: number, userRole: Role): Promise<Property>;
    countPropertiesByOwner(ownerId: number): Promise<number>;
    getPropertiesByOwner(ownerId: number): Promise<Property[]>;
    getTenantsByPropertyId(propertyId: number): Promise<Tenant[]>;
    calculateTotalRevenue(ownerId: number): Promise<number>;
    calculateOccupancyRate(ownerId: number): Promise<number>;
    getPropertiesByTenant(tenantId: number): Promise<Property[]>;
    countActiveTenants(ownerId: number): Promise<number>;
    getAvailablePropertiesForTenants(): Promise<Property[]>;
    getPropertiesWithAvailableUnits(): Promise<{
        availableUnits: number;
        id: number;
        name: string;
        description: string;
        type: string;
        address: string;
        city: string;
        area: string;
        googleMapLink: string;
        totalUnits: number;
        pricePerUnit: number;
        bedrooms: number;
        bathrooms: number;
        squareMeters: number;
        amenities: string[];
        images: string[];
        featured: boolean;
        status: string;
        payForFeatured: boolean;
        featuredDuration: string;
        role: Role;
        ownerId: number;
        owner: Owner;
        units: import("../units/entities/unit.entity").Unit[];
        tenants: Tenant[];
        landlordId?: number;
        landlord?: import("../landlord/landlord.entity").Landlord;
        amenitiesEntities: import("../amenity/amenity.entity").Amenity[];
        leases: import("../leases/lease.entity").Lease[];
    }[]>;
}
